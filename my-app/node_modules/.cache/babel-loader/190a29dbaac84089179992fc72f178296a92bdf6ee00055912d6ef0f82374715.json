{"ast":null,"code":"var _jsxFileName = \"C:\\\\workspace\\\\07_React\\\\my-app\\\\src\\\\exam\\\\Exam3.js\",\n  _s = $RefreshSig$();\n// State & Props\n\nimport { useState } from \"react\";\n\n// State lifting up : 상태 끌어올리기\n// - 리액트는 부모 컴포넌트가 자식 컴포넌트 상태 변경 불가\n// -> 자식에서 발생한 이벤트를 부모에서 처리하도록 하는 상태 끌어올리기 패턴을 이용함\n\n// 해당 파일에서 컴포넌트 총 3개 존재\n// Id 컴포넌트(자식)\n// Pw 컴포넌트(자식)\n// Exam3 컴포넌트(부모) = 해당 파일에서 내보낼 기본 컴포넌트\n\n// Id 컴포넌트(자식)\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Id = () => {\n  //const [id, setId] = useState(\"\"); // 상태(state) 중 'id'를 생성하고 초기값 \"\" 설정\n\n  return (\n    /*#__PURE__*/\n    // JSX를 사용한 HTML 구문 작성부는 무조건 최상위 부모태그 하나로 감싸져 있어야 한다.\n    _jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"ID : \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 13\n      }, this)\n    }, void 0, false)\n  );\n};\n\n// Pw 컴포넌트(자식)\n_c = Id;\nconst Pw = () => {\n  //const [pw, setPw] = useState(\"\"); // 상태(state) 중 'pw'를 생성하고 초기값 \"\" 설정\n\n  return (\n    /*#__PURE__*/\n    // JSX를 사용한 HTML 구문 작성부는 무조건 최상위 부모태그 하나로 감싸져 있어야 한다.\n    _jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"PW : \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 13\n      }, this)\n    }, void 0, false)\n  );\n};\n\n// Exam3 컴포넌트(부모)\n_c2 = Pw;\nconst Exam3 = () => {\n  _s();\n  // 자식의 상태를 부모에서 정의(상태 끌어올리기)\n  const [id, setId] = useState(\"\");\n  const [pw, setPw] = useState(\"\");\n\n  // 자식의 상태를 변경할 수 있는 함수 정의\n  const onChangeId = e => {\n    setId(e.target.value);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Id, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Pw, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: id.length === 0 || pw.length === 0,\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s(Exam3, \"q1NHQv0amsj8/Mc+FUFqRboezwg=\");\n_c3 = Exam3;\nexport default Exam3;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Id\");\n$RefreshReg$(_c2, \"Pw\");\n$RefreshReg$(_c3, \"Exam3\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Id","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","Pw","_c2","Exam3","_s","id","setId","pw","setPw","onChangeId","e","target","value","disabled","length","_c3","$RefreshReg$"],"sources":["C:/workspace/07_React/my-app/src/exam/Exam3.js"],"sourcesContent":["// State & Props\r\n\r\nimport { useState } from \"react\"\r\n\r\n// State lifting up : 상태 끌어올리기\r\n// - 리액트는 부모 컴포넌트가 자식 컴포넌트 상태 변경 불가\r\n// -> 자식에서 발생한 이벤트를 부모에서 처리하도록 하는 상태 끌어올리기 패턴을 이용함\r\n\r\n\r\n\r\n// 해당 파일에서 컴포넌트 총 3개 존재\r\n// Id 컴포넌트(자식)\r\n// Pw 컴포넌트(자식)\r\n// Exam3 컴포넌트(부모) = 해당 파일에서 내보낼 기본 컴포넌트\r\n\r\n\r\n// Id 컴포넌트(자식)\r\nconst Id = () => {\r\n    \r\n    //const [id, setId] = useState(\"\"); // 상태(state) 중 'id'를 생성하고 초기값 \"\" 설정\r\n\r\n    return (\r\n        // JSX를 사용한 HTML 구문 작성부는 무조건 최상위 부모태그 하나로 감싸져 있어야 한다.\r\n        <>\r\n            <div>\r\n                <label>ID : </label>\r\n                <input />\r\n            </div>\r\n        </>\r\n    );\r\n\r\n}\r\n\r\n// Pw 컴포넌트(자식)\r\nconst Pw = () => {\r\n    \r\n    //const [pw, setPw] = useState(\"\"); // 상태(state) 중 'pw'를 생성하고 초기값 \"\" 설정\r\n\r\n    return (\r\n        // JSX를 사용한 HTML 구문 작성부는 무조건 최상위 부모태그 하나로 감싸져 있어야 한다.\r\n        <>\r\n            <div>\r\n                <label>PW : </label>\r\n                <input />\r\n            </div>\r\n        </>\r\n    );\r\n\r\n}\r\n\r\n\r\n// Exam3 컴포넌트(부모)\r\nconst Exam3 = () => {\r\n\r\n    // 자식의 상태를 부모에서 정의(상태 끌어올리기)\r\n    const [id, setId] = useState(\"\");\r\n    const [pw, setPw] = useState(\"\");\r\n\r\n    // 자식의 상태를 변경할 수 있는 함수 정의\r\n    const onChangeId = e => {\r\n        setId(e.target.value);\r\n    }\r\n\r\n    return(\r\n        <>\r\n            {/* 컴포넌트 중 Id를 불러 렌더링 (Id가 Exam3의 자식이 됨)*/}\r\n            <Id />\r\n\r\n            {/* 컴포넌트 중 Id를 불러 렌더링 (Pw가 Exam3의 자식이 됨)*/}\r\n            <Pw />\r\n\r\n            <div>\r\n                {/* button의 disabled 속성 : 비활성화 속성 (비활성 true / 활성 false) \r\n                    -> id와 pw 둘 다 작성되어야 활성화\r\n                */}\r\n                <button disabled={id.length === 0 || pw.length === 0}>Login</button>\r\n            </div>\r\n        </>\r\n    );\r\n\r\n}\r\n\r\nexport default Exam3;\r\n\r\n"],"mappings":";;AAAA;;AAEA,SAASA,QAAQ,QAAQ,OAAO;;AAEhC;AACA;AACA;;AAIA;AACA;AACA;AACA;;AAGA;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AACA,MAAMC,EAAE,GAAGA,CAAA,KAAM;EAEb;;EAEA;IAAA;IACI;IACAH,OAAA,CAAAE,SAAA;MAAAE,QAAA,eACIJ,OAAA;QAAAI,QAAA,gBACIJ,OAAA;UAAAI,QAAA,EAAO;QAAK;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eACpBR,OAAA;UAAAK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACR;IAAC,gBACR;EAAC;AAGX,CAAC;;AAED;AAAAC,EAAA,GAhBMN,EAAE;AAiBR,MAAMO,EAAE,GAAGA,CAAA,KAAM;EAEb;;EAEA;IAAA;IACI;IACAV,OAAA,CAAAE,SAAA;MAAAE,QAAA,eACIJ,OAAA;QAAAI,QAAA,gBACIJ,OAAA;UAAAI,QAAA,EAAO;QAAK;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eACpBR,OAAA;UAAAK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACR;IAAC,gBACR;EAAC;AAGX,CAAC;;AAGD;AAAAG,GAAA,GAjBMD,EAAE;AAkBR,MAAME,KAAK,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAEhB;EACA,MAAM,CAACC,EAAE,EAAEC,KAAK,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EAChC,MAAM,CAACkB,EAAE,EAAEC,KAAK,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;;EAEhC;EACA,MAAMoB,UAAU,GAAGC,CAAC,IAAI;IACpBJ,KAAK,CAACI,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;EACzB,CAAC;EAED,oBACIrB,OAAA,CAAAE,SAAA;IAAAE,QAAA,gBAEIJ,OAAA,CAACG,EAAE;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAGNR,OAAA,CAACU,EAAE;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAENR,OAAA;MAAAI,QAAA,eAIIJ,OAAA;QAAQsB,QAAQ,EAAER,EAAE,CAACS,MAAM,KAAK,CAAC,IAAIP,EAAE,CAACO,MAAM,KAAK,CAAE;QAAAnB,QAAA,EAAC;MAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnE,CAAC;EAAA,eACR,CAAC;AAGX,CAAC;AAAAK,EAAA,CA5BKD,KAAK;AAAAY,GAAA,GAALZ,KAAK;AA8BX,eAAeA,KAAK;AAAC,IAAAH,EAAA,EAAAE,GAAA,EAAAa,GAAA;AAAAC,YAAA,CAAAhB,EAAA;AAAAgB,YAAA,CAAAd,GAAA;AAAAc,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
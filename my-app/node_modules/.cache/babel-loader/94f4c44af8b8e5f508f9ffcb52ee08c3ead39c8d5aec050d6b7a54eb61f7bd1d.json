{"ast":null,"code":"var _jsxFileName = \"C:\\\\workspace\\\\07_React\\\\my-app\\\\src\\\\contextAPI\\\\ThemeContext.js\",\n  _s = $RefreshSig$();\n// ThemeContext.js\n// 내가 만들고자 하는 Context를 정의할 파일\n\nimport { createContext, useState } from \"react\";\n\n// Context API는 React에서 컴포넌트 트리 전체에 걸쳐 전역적인 데이터를 공유하고 전달하기 위한 방법\n// -> 깊이 중첩된 컴포넌트들 간에도 데이터를 간편하게 전달할 수 있다.\n// -> 보통 props drilling을 피하기 위해 사용\n\n// 사용 방법\n// createContext() 함수를 사용하여 Context 객체를 생성할 수 있음.\n// -> Provider와 Consumer를 포함\n\n// 1. Provider : 컨텍스트를 사용하는 컴포넌트들에게 값을 제공하는 역할로,\n//               값을 전달할 (자식) 컴포넌트들을 감싸고, 'value'라는 prop을 통해 전달할 값을 지정\n\n// 2. Consumer : 컨텍스트의 값을 사용하는 컴포넌트\n//               최근에 React에서는 userContext 훅을 사용하여 컨텍스트 값을 가져와 사용함\n\n// ThemeContext 라는 이름의 새 Context 생성\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThemeContext = /*#__PURE__*/createContext({\n  children\n});\n\n// ThemeProvider 컴포넌트 \nconst ThemeProvider = () => {\n  _s();\n  // 테마 상태 정의, 초기값 light\n  const [theme, setTheme] = useState('light');\n\n  // 테마를 토글하는 함수 정의\n  const toggleTheme = () => {\n    setTheme(theme == 'light' ? 'dark' : 'light');\n  };\n\n  // ThemeContext.Provider 태그를 통해 '상태 theme' 과 'toggleTheme 함수'를 제공\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      theme,\n      toggleTheme\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n};\n_s(ThemeProvider, \"c/tiXTWXTQispzpG//dV5FX41vQ=\");\n_c = ThemeProvider;\nexport { ThemeContext, ThemeProvider };\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["createContext","useState","jsxDEV","_jsxDEV","ThemeContext","children","ThemeProvider","_s","theme","setTheme","toggleTheme","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/workspace/07_React/my-app/src/contextAPI/ThemeContext.js"],"sourcesContent":["// ThemeContext.js\r\n// 내가 만들고자 하는 Context를 정의할 파일\r\n\r\nimport { createContext, useState } from \"react\";\r\n\r\n\r\n// Context API는 React에서 컴포넌트 트리 전체에 걸쳐 전역적인 데이터를 공유하고 전달하기 위한 방법\r\n// -> 깊이 중첩된 컴포넌트들 간에도 데이터를 간편하게 전달할 수 있다.\r\n// -> 보통 props drilling을 피하기 위해 사용\r\n\r\n// 사용 방법\r\n// createContext() 함수를 사용하여 Context 객체를 생성할 수 있음.\r\n// -> Provider와 Consumer를 포함\r\n\r\n// 1. Provider : 컨텍스트를 사용하는 컴포넌트들에게 값을 제공하는 역할로,\r\n//               값을 전달할 (자식) 컴포넌트들을 감싸고, 'value'라는 prop을 통해 전달할 값을 지정\r\n\r\n// 2. Consumer : 컨텍스트의 값을 사용하는 컴포넌트\r\n//               최근에 React에서는 userContext 훅을 사용하여 컨텍스트 값을 가져와 사용함\r\n\r\n\r\n// ThemeContext 라는 이름의 새 Context 생성\r\nconst ThemeContext = createContext({ children });\r\n\r\n// ThemeProvider 컴포넌트 \r\nconst ThemeProvider = () => {\r\n\r\n    // 테마 상태 정의, 초기값 light\r\n    const [theme, setTheme] = useState('light');\r\n\r\n    // 테마를 토글하는 함수 정의\r\n    const toggleTheme = () => {\r\n        setTheme(theme == 'light' ? 'dark' : 'light');\r\n    }\r\n\r\n    // ThemeContext.Provider 태그를 통해 '상태 theme' 과 'toggleTheme 함수'를 제공\r\n    return (\r\n        <ThemeContext.Provider value={{ theme, toggleTheme }}>\r\n            {children}\r\n        </ThemeContext.Provider>\r\n    )\r\n\r\n}\r\n\r\nexport {ThemeContext, ThemeProvider};"],"mappings":";;AAAA;AACA;;AAEA,SAASA,aAAa,EAAEC,QAAQ,QAAQ,OAAO;;AAG/C;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAGA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,YAAY,gBAAGJ,aAAa,CAAC;EAAEK;AAAS,CAAC,CAAC;;AAEhD;AACA,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAExB;EACA,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,OAAO,CAAC;;EAE3C;EACA,MAAMS,WAAW,GAAGA,CAAA,KAAM;IACtBD,QAAQ,CAACD,KAAK,IAAI,OAAO,GAAG,MAAM,GAAG,OAAO,CAAC;EACjD,CAAC;;EAED;EACA,oBACIL,OAAA,CAACC,YAAY,CAACO,QAAQ;IAACC,KAAK,EAAE;MAAEJ,KAAK;MAAEE;IAAY,CAAE;IAAAL,QAAA,EAChDA;EAAQ;IAAAQ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACU,CAAC;AAGhC,CAAC;AAAAT,EAAA,CAjBKD,aAAa;AAAAW,EAAA,GAAbX,aAAa;AAmBnB,SAAQF,YAAY,EAAEE,aAAa;AAAE,IAAAW,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}